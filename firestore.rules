rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    // Events collection
    match /events/{eventId} {
      allow read: if true;
      allow create: if isAuthenticated();
      allow update, delete: if isOwner(resource.data.creatorId);
      
      // Nested tickets collection
      match /tickets/{ticketId} {
        allow read: if true;
        allow create: if isOwner(get(/databases/$(database)/documents/events/$(eventId)).data.creatorId);
        allow update: if isOwner(get(/databases/$(database)/documents/events/$(eventId)).data.creatorId);
      }
    }

    // Tickets collection
    match /tickets/{ticketId} {
      allow read: if true;
      allow create: if isAuthenticated();
      allow update: if isAuthenticated() && (
        isOwner(get(/databases/$(database)/documents/events/$(resource.data.eventId)).data.creatorId) ||
        // Allow updating remaining count during purchase
        (request.resource.data.diff(resource.data).affectedKeys().hasOnly(['remaining', 'updatedAt']))
      );
    }

    // Orders collection
    match /orders/{orderId} {
      allow read: if isOwner(resource.data.userId);
      allow create: if isAuthenticated() && request.resource.data.userId == request.auth.uid;
      allow update: if isAuthenticated() && (
        // Only allow updating status and payment fields
        request.resource.data.diff(resource.data).affectedKeys()
          .hasOnly(['status', 'paymentReference', 'updatedAt'])
      );
    }

    // Users collection
    match /users/{userId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && request.resource.data.id == request.auth.uid;
      allow update: if isOwner(userId);
    }
  }
}